# Install PostGIS
psql < /usr/local/share/postgis/postgis.sql

# Load the standard SRSs
psql < /usr/local/share/postgis/spatial_ref_sys.sql

# Add World Robinson as well
# from http://spatialreference.org/ref/esri/54030/postgis/
psql <<END
INSERT into spatial_ref_sys (
    srid, auth_name, auth_srid,
    proj4text, srtext
) values (
    954030, 'esri', 54030,
    '+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs ',
      'PROJCS["World_Robinson",GEOGCS["GCS_WGS_1984",DATUM["WGS_1984",SPHEROID["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Robinson"],PARAMETER["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER["Central_Meridian",0],UNIT["Meter",1],AUTHORITY["EPSG","54030"]]'
);
END

# Load the shape file
shp2pgsql -W LATIN1 -s 4326 TM_WORLD_BORDERS-0/TM_WORLD_BORDERS-0.3.shp country | psql

# If you forget the -s 4326, you can fix it up with:
select UpdateGeometrySRID('country', 'the_geom', 4326);



# Getting the geometry data out again (in the projection of choice, here Robinson)
\t on
select ST_AsText(ST_Transform(the_geom,954030)) from country where iso2='FR';
select ST_AsSVG(ST_Transform(the_geom,954030)) from country where iso2='FR';

# To simplify the path
select ST_AsSVG(ST_Simplify(ST_Transform(the_geom,954030), 10000)) from country where iso2='FR';

# To round off to 1 decimal place
select ST_AsSVG(ST_Transform(the_geom,954030), 0, 1) from country where iso2='FR';


# The outline of the whole Robinson map (on the lhs)
select ST_AsText(ST_Transform(ST_Segmentize(ST_GeomFromText('LINESTRING(-180 -90,-180 90)', 4326), 1), 954030));
# so incidentally the bounding rectangle is
#   -17005833.3305252 -8625154.47184994,17005833.3305252 8625154.47184994

# The whole boundary all around:
select ST_AsSVG(ST_Transform(ST_Segmentize(ST_GeomFromText('POLYGON((-180 -90,-180 90,180 90,180 -90,-180 -90))', 4326), 5), 954030));


# Here’s a nice World Robinson map in SVG format:
# http://upload.wikimedia.org/wikipedia/commons/0/03/BlankMap-World6.svg

# Note that PROJ.4 has an error in its implementation of the Robinson projection:
#  http://osgeo-org.1803224.n2.nabble.com/Robinson-projection-td6445718.html


# I’ve just discovered http://polymaps.org/, “A JavaScript library for image- and vector-tiled maps using SVG.”


# Interesting bug:
robin=# select ST_AsSVG(ST_Simplify(ST_Transform(the_geom,954030), 10000)) from country where iso2='CX';
ERROR:  invalid memory alloc request size 18446744073709551614


# Algorithm for simplifying polygons: Douglas–Peucker algorithm
# http://www.cs.ubc.ca/~snoeyink/papers/DPsimp.arch
# as implemented by the PostGIS ST_Simplify and ST_SimplifyPreserveTopology commands



<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="442.84" width="863.21002" viewBox="82.992 45.607 2528.5721 1428.3294">
  <defs />
  <style type="text/css">
    #GB { fill: red; }
  </style>
  <path id="FR" d="…"/>
</svg>



# All the countries as paths
\o |mate -
select '<path id="'||iso2||'" d="'|| ST_AsSVG(ST_GeomFromText(ST_AsText(ST_Simplify(ST_Transform(the_geom,954030), 10000))), 0, 0) ||'"/>' from country;
\o


# Procedure for making a cartogram:
## One-off preparation
psql < grid.sql

## Load the data for this cartogram
bin/load-data.py "carbon reserves" data/carbon-reserves.csv Code TOTAL

## Generate the starting density grid
bin/density-grid.py "carbon reserves" > work/carbon-reserves.density

## Run cart to generate the grid distortion
cart 1500 750 work/carbon-reserve-density.txt work/carbon-reserves.cart

## Generate the map
bin/as-svg.py "carbon reserves" work/carbon-reserves.cart > maps/carbon-reserves.svg





# Upload an SVG file to S3
gzip -9 maps/carbon-reserves.anim.no-data-marked.svg
aws put "Content-type: image/svg+xml" "Content-Encoding: gzip" "x-amz-acl:public-read" \
   s3.boskent.com/cartograms/carbon-reserves.anim.no-data-marked.svg \
   maps/carbon-reserves.anim.no-data-marked.svg.gz



# Making a dataset of the population numbers
insert into dataset (name) values ('pop2005');
insert into data_value (
  dataset_id, country_gid, value
) (
  select currval('dataset_id_seq'::regclass), gid, pop2005
  from country
  where country.area > 0
);

$ bin/density-grid.py pop2005 > work/pop2005.density
$ cart 1500 750 work/pop2005.density work/pop2005.cart
$ bin/as-svg.py pop2005 work/pop2005.cart | gzip -c -9 > maps/pop2005.svg

aws put "Content-type: image/svg+xml" "Content-Encoding: gzip" "x-amz-acl:public-read" \
   s3.boskent.com/cartograms/pop2005.svg \
   maps/pop2005.svg.gz


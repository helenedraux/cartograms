#!/usr/bin/python

import csv
import sys
import yaml

def fail(fmt, **kwargs):
    print >>sys.stderr, fmt.format(**kwargs)
    sys.exit(64)

def main():
    conf = yaml.load(sys.stdin.read())
    
    rows = set()
    columns = []
    entries = {} # (column, row) => value
    
    for i, f in enumerate(conf["files"]):
        csv_filename = f["file"]
        csv_f = open(csv_filename, 'r')
        csv_r = csv.reader(csv_f)
        
        key = f.get("key", conf.get("key"))
        values = f["values"]
        columns += values
        
        header = csv_r.next()
        index_by_column_name = dict(
          (x.decode("utf-8"), i) for (i, x) in enumerate(header)
        )
        
        def check(column_name):
            if column_name not in index_by_column_name:
                fail(u"{self}: File {csv_filename} does not have a column '{column_name}': columns are {columns}",
                  self=sys.argv[0],
                  csv_filename=csv_filename,
                  column_name=column_name,
                  columns=repr(index_by_column_name.keys()))
        
        check(key)
        for value in values:
            check(value)
        
        for row in csv_r:
            row = [x.decode("utf-8") for x in row]
            key_v = row[index_by_column_name[key]]
            rows.add(key_v)
            
            for value in values:
                try:
                    value_v = row[index_by_column_name[value]]
                except IndexError:
                    value_v = ""
                entries[(value, key_v)] = value_v
        
        csv_f.close()
    
    sys.stdout.flush()
    
    w = csv.writer(sys.stdout)
    if conf.get("header", False):
        w.writerow([conf.get("key")] + columns)
    for row in sorted(rows):
        w.writerow([row] + [
            entries.get((col, row), "").encode("utf-8")
            for col in columns
        ])
    sys.stdout.flush()

main()

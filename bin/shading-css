#!/usr/bin/python

"""
Generate CSS for choropleth shading.

Takes two CSV files: the first is the shading spec, and the second the region data.
"""

import csv
import json
import optparse
import sys

class Rangelike(object):
    @staticmethod
    def parse(str):
        if ".." in str:
            a, b = str.split("..")
            if a and b:
                return Range(float(a), float(b))
            elif a:
                return AtMost(float(a))
            elif b:
                return UpTo(float(b))
            else:
                raise Exception("Failed to parse range: " + str)
        else:
            return Exact(float(str))

class Exact(Rangelike):
    def __init__(self, value):
        self.value = value
    def __contains__(self, item):
        return item == self.value

class Range(Rangelike):
    def __init__(self, min, ceil):
        self.min = min
        self.ceil = ceil
    def __contains__(self, item):
        return self.min <= item < self.ceil

class UpTo(Rangelike):
    def __init__(self, ceil):
        self.ceil = ceil
    def __contains__(self, item):
        return item < self.ceil

class AtMost(Rangelike):
    def __init__(self, min):
        self.min = min
    def __contains__(self, item):
        return self.min <= item


def load_shading_spec(shading_spec_filename):
    with open(shading_spec_filename, 'r') as shading_spec_file:
        r = csv.reader(shading_spec_file)
        header = r.next()
        value_col_name = header[0]
        if header != [value_col_name, "color", "key"]:
            raise Exception("Expected header to be %r, but found %r" % ([value_col_name, "color", "key"], header))
        
        shades = []
        for range_str, color, key in r:
            shade_range = Rangelike.parse(range_str)
            shades.append((shade_range, color))
        
        return (value_col_name, shades)

def load_data(data_filename, shading_spec):
    value_col_name, shades = shading_spec
    
    with open(data_filename, 'r') as data_file:
        r = csv.reader(data_file)
        header = r.next()
        region_key_col = header.index("Alpha-2") # XXXX Not very general!
        value_col = header.index(value_col_name)
        
        region_shades = {}
        for row in r:
            region_key = row[region_key_col]
            value = row[value_col]
            
            if value == "":
                # Ignore blank values
                continue
            
            try:
                float(value)
            except ValueError:
                print >>sys.stderr, "Ignoring non-numeric value: " + value
                continue
            
            for shade_range, color in shades:
                if float(value) in shade_range:
                    region_shades.setdefault(color, []).append(region_key)
                    break
            else:
                raise Exception("Value %r is not in any specified range; checked %r" % (value, shades))
        
        return region_shades

def main():
    parser = optparse.OptionParser()
    parser.add_option("", "--class",
                      action="store", dest="css_class",
                      help="the name of the CSS class to use")
    parser.add_option("", "--lowercase-id",
                      action="store_true", default=False,
                      help="lowercase the CSS id")
    parser.add_option("", "--id-prefix",
                      action="store", default="",
                      help="prefix for the CSS id")
    parser.add_option("", "--json",
                      action="store_true", default=False,
                      help="produce output in JSON format, not CSS")
    parser.add_option("", "--shading",
                      action="store",
                      help="the name of the file containing the shading spec")
    parser.add_option("", "--data",
                      action="store",
                      help="the name of the file containing the raw data")
    
    (options, args) = parser.parse_args()
    if args:
        parser.error("Unexpected non-option arguments")
    if not options.shading:
        parser.error("The --shading option must be specified")
    if not options.data:
        parser.error("The --data option must be specified")
    
    shading_spec = load_shading_spec(options.shading)
    shades = load_data(options.data, shading_spec)
    
    if options.json:
        def _decodeColor(color_string):
            if color_string.startswith("#"):
                if len(color_string) != 7:
                    raise Exception("Unsupported colour format: " + color_string)
                return int(color_string[1:], 16)
            else:
                return color_string
        json.dump(
        dict((
                (region_key, _decodeColor(color))
                for color, region_keys in shades.iteritems()
                for region_key in region_keys
            )),
            sys.stdout)
        return
    
    def munge(region_key):
        k = region_key
        if options.lowercase_id:
            k = k.lower()
        return options.id_prefix + k
    
    if options.css_class:
        def css_id(css_class, region_key):
            return ".{css_class} #{region_key}".format(css_class=options.css_class, region_key=region_key)
    else:
        def css_id(css_class, region_key):
            return "#" + region_key
    
    for color, region_keys in shades.iteritems():
        print ", ".join([
            css_id(css_class=options.css_class, region_key=munge(region_key))
            for region_key in region_keys
        ]), "{{ fill: {color}; }}".format(color=color)

if __name__ == "__main__":
    main()
